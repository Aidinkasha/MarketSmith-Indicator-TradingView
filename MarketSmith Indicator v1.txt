// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// 

//@version=5
indicator("MarketSmith Indicator", overlay=true, max_bars_back = 253)

//------------------  BARS PART ---------------------//
// Color of bars
prevClose   = input(true, title='Color Based On Previous Close',  group="----------BARS----------", inline="x")
colorCandle = close>open ? color.rgb(39,54,233,0):color.rgb(222,50,174,0)
if(prevClose)
    colorCandle := close>close[1] ? color.rgb(39,54,233,0):color.rgb(222,50,174,0)
// Full Body (without border without wick)
plotcandle(low, high, low, high, title='MarketSmith Bars', color = colorCandle, wickcolor = color.rgb(255,255,255,100), bordercolor = color.rgb(255,255,255,100), editable = true)
// PlotChar - on close
plotchar(close, char='-', location=location.absolute, size=size.small, color=colorCandle, editable = true)

//------------------  SMA's PART ---------------------//
// Input SMA for Daily TF and others
iSma10    = input(true, title='MA 1',  group="----------SMAs----------", inline="sma10")
iSmaV10   = input(10, title='Lenght',  group="----------SMAs----------", inline="sma10")
iExp10    = input(true, title='Exponential',  group="----------SMAs----------", inline="sma10")
iSma21    = input(true, title='MA 2',  group="----------SMAs----------", inline="sma21")
iSmaV21   = input(21, title='Lenght',  group="----------SMAs----------", inline="sma21")
iExp21    = input(true, title='Exponential',  group="----------SMAs----------", inline="sma21")
iSma50    = input(true, title='MA 3',  group="----------SMAs----------", inline="sma50")
iSmaV50   = input(50, title='Lenght',  group="----------SMAs----------", inline="sma50")
iExp50    = input(false, title='Exponential',  group="----------SMAs----------", inline="sma50")
iSma200   = input(true, title='MA 4', group="----------SMAs----------", inline="sma200")
iSmaV200  = input(200, title='Lenght',  group="----------SMAs----------", inline="sma200")
iExp200   = input(false, title='Exponential',  group="----------SMAs----------", inline="sma200")

// Input SMA for Weekly TimeFrame
iSma10We    = input(true, title='SMA 1',  group="----------SMAs We----------", inline="sma10We")
iSmaV10We   = input(10, title='Lenght',  group="----------SMAs We----------", inline="sma10We")
iExp10We    = input(false, title='Exponential',  group="----------SMAs We----------", inline="sma10We")
//iSorS10We   = input.string(defval ='SMA', title='MA 1', options=['SMA', 'EMA'], group="----------SMAs We----------", inline="sma10We")
iEma20We    = input(true, title='EMA 2',  group="----------SMAs We----------", inline="ema20We")
iSmaV20We   = input(20, title='Lenght',  group="----------SMAs We----------", inline="ema20We")
iExp20We    = input(true, title='Exponential',  group="----------SMAs We----------", inline="ema20We")
//iSorS20We   = input.string(defval ='EMA', title='MA 2', options=['SMA', 'EMA'], group="----------SMAs We----------", inline="ema20We")
iSma30We    = input(true, title='SMA 3',  group="----------SMAs We----------", inline="sma30We")
iSmaV30We   = input(30, title='Lenght',  group="----------SMAs We----------", inline="sma30We")
iExp30We    = input(false, title='Exponential',  group="----------SMAs We----------", inline="sma30We")
//iSorS30We   = input.string(defval ='SMA', title='MA 3', options=['SMA', 'EMA'], group="----------SMAs We----------", inline="sma30We")
iSma40We    = input(true, title='SMA 4',  group="----------SMAs We----------", inline="sma40We")
iSmaV40We   = input(40, title='Lenght',  group="----------SMAs We----------", inline="sma40We")
iExp40We    = input(false, title='Exponential',  group="----------SMAs We----------", inline="sma40We")
//iSorS40We   = input.string(defval ='SMA', title='MA 4', options=['SMA', 'EMA'], group="----------SMAs We----------", inline="sma40We")


// SMA calculation Daily & others TF
sma10  = iExp10  ? ta.ema(close,iSmaV10) :ta.sma(close,iSmaV10)
sma21  = iExp21  ? ta.ema(close,iSmaV21) :ta.sma(close,iSmaV21)
sma50  = iExp50  ? ta.ema(close,iSmaV50) :ta.sma(close,iSmaV50)
sma200 = iExp200 ? ta.ema(close,iSmaV200):ta.sma(close,iSmaV200)

// SMA calculation We
sma10We  = iExp10We ? ta.ema(close,iSmaV10We):ta.sma(close,iSmaV10We)
ema20We  = iExp20We ? ta.ema(close,iSmaV20We):ta.sma(close,iSmaV20We)
sma30We  = iExp30We ? ta.ema(close,iSmaV30We):ta.sma(close,iSmaV30We)
sma40We  = iExp40We ? ta.ema(close,iSmaV40We):ta.sma(close,iSmaV40We)

// Ploting SMA/EMA Daily and other TF
tfWeekly = timeframe.isweekly
psma10  = plot(iSma10 and not tfWeekly ?  sma10:na,  linewidth=1, color=color.rgb(68,186,76))
pema21  = plot(iSma21 and not tfWeekly ?  sma21:na,  linewidth=1, color=color.rgb(236,180,245,0))
psma50  = plot(iSma50 and not tfWeekly ?  sma50:na,  linewidth=1, color=color.red)
psma200 = plot(iSma200 and not tfWeekly ? sma200:na, linewidth=1, color=color.rgb(0,0,0,0))

// Ploting SMA/EMA We
psma10We =  plot(iSma10We and tfWeekly  ? sma10We:na, linewidth=1, color=color.red)
pema20We =  plot(iEma20We and tfWeekly  ? ema20We:na, linewidth=1, color=color.rgb(240,141,240,0))
psma30We =  plot(iSma30We and tfWeekly  ? sma30We:na, linewidth=1, color=color.rgb(102,144,78,0))
psma40We =  plot(iSma40We and tfWeekly  ? sma40We:na, linewidth=1, color=color.rgb(0,0,0,0))

//------------------  RS Line Part  ---------------------// and // SP500 -> 0S&P5 //

//Relative Price Strength (RS) Rating or Relative Strenght.
//This is a measure of a stock's price performance over the last
//twelve months, compared to all stocks in IBD's Database.
//The rating scale ranges frome 1 (lowest) to 99 (highest)
//At least this is the IBD proprietary rating's defintion.
//Let's create an equivalent here for TradingView!
//
// Â© RaviYendru thanks for providing the intial script
// Fred6724 - Let's see if it is possible to get better results

hideRSLine  = input(false, title="Hide RS Line", group="----------RS Rating----------", inline="0")
hideRSRat   = input(false, title="Hide Rating", group = "----------RS Rating----------", inline="0")
//seedetail   = input(false, title="Display the 3 results", group = "Parameters", inline="0")
src         = close
comparativeTickerId = input("SP:SPX", title="Comparative Symbol", group = "----------RS Rating----------", tooltip = "Reference ticker used for calculation of the RS Line and RS Score.")
SpxValue    = input(4400, title="Value of Comparative Symbol", group = "----------RS Rating----------", tooltip = "Used to display the RS Line under the price. If you modify the ticker, please report its value in this box.")
offset      = input.int(80, minval = 0, maxval = 300, title="Offset (%)", group = "----------RS Rating----------", tooltip = "Used to display the RS Line under the price.")
colorRS     = input(color.rgb(0, 0, 255), title = "Color of RS Line & Rating", group = "----------RS Rating----------")
plotNewHigh = input(false, title = "Plot RS New Highs", group = "----------RS Rating----------")
plotNewLow  = input(false, title = "Plot RS New Lows", group = "----------RS Rating----------")
blueDotCol  = input(color.rgb(38, 198, 218,60), title = "Color of Dots", group = "----------RS Rating----------")
redDotCol   = input(color.rgb(255, 82, 82, 60), title = "Color", group = "----------RS Rating----------")
rsNewHigh   = input.string("Historical RS New Highs", title = "Type", options=["RS New Highs","RS New Highs Before Price", "Historical RS New Highs", "Historical RS New Highs  Before Price"], group = "----------RS Rating----------")
rsNewLow    = input.string("Historical RS New Lows", title = "Type", options=["RS New Lows","RS New Lows Before Price", "Historical RS New Lows", "Historical RS New Lows  Before Price"], group = "----------RS Rating----------")
lookback    = input.int(40, title = "Look-back", minval = 1, maxval = 200, group = "----------RS Rating----------", tooltip = "The lookback for calculation of price and RS New Highs.")
lookback2   = input.int(40, title = "Look-back", minval = 1, maxval = 200, group = "----------RS Rating----------", tooltip = "The lookback for calculation of price and RS New Lows.")
boolMa      = input(false, title = "Display MA", group = "MA on RS Line")
lenMa       = input(21, title = "Lenght Da", group = "MA on RS Line", inline = "c")
colMa       = input(color.orange, title = "Color", group = "MA on RS Line", inline = "c")
typMa       = input.string("EMA", title = "Type Da", options = ["SMA", "EMA"], group = "MA on RS Line", inline = "c")
lenMaWe     = input(10, title = "Lenght We", group = "MA on RS Line", inline = "c")
typMaWe     = input.string("SMA", title = "Type We", options = ["SMA", "EMA"], group = "MA on RS Line", inline = "c")
fillMa      = input(false, title = "Area Color", group = "MA on RS Line")
posCol      = input(color.rgb(0, 230, 119, 75), title = "Positive Area", group = "MA on RS Line", inline = "d")
negCol      = input(color.rgb(255, 82, 82, 75),  title = "Negative Area", group = "MA on RS Line", inline = "d")


// Using bar index in case of IPO to avoid NaN results
// Added max_bars_max = 253 to improve display speed
n63      = bar_index < 63  ? bar_index:63 
n126     = bar_index < 126 ? bar_index:126
n189     = bar_index < 189 ? bar_index:189
n252     = bar_index < 252 ? bar_index:252


// Comparative Ticker for RS Line
comparativeSymbol   = request.security(comparativeTickerId, timeframe.period, close)
// RS Line but multiplied by a little bit less than the constant value of the comparative ticker for correct display
rsCurve             = (src/comparativeSymbol)
// We use a wider offset for Weekly timeframe for a smoother display
rsRatio             = timeframe.isweekly ? SpxValue*(offset-10)/100:SpxValue*offset/100
rs                  = rsCurve*rsRatio
prevlookback  = lookback
prevlookback2 = lookback2 // For RS New Lows
lookback := math.min(lookback - 1, bar_index)
rsPlot = plot(rs, title="RS Line", style=plot.style_line, linewidth=1, color=colorRS)

// MA on RS Line
// SMA and EMA
rsMA      = ta.sma(rs, lenMa)
if(typMa == "SMA" and not timeframe.isweekly)
    rsMA      := ta.sma(rs, lenMa)
if(typMa == "EMA" and not timeframe.isweekly)  
    rsMA      := ta.ema(rs, lenMa)
if(typMaWe == "SMA" and timeframe.isweekly)
    rsMA      := ta.sma(rs, lenMaWe)
if(typMaWe == "EMA" and timeframe.isweekly)
    rsMA      := ta.ema(rs, lenMaWe)

maPlot    = plot(boolMa ? rsMA :na,    color = colMa, linewidth = 1)

// Color Filling
// I will use an invisible MA to be able to choose or not the display of the fill
maPlot2    = plot(boolMa and fillMa ? rsMA:na,    color = color.rgb(0,0,0,100), linewidth = 1)
// This variable gets the color that will be used for the fill
fillCol = rs > rsMA ? posCol:negCol
// Here if a MA is missing, there is no fill
fill(rsPlot, maPlot2 ,   color=fillCol)



// Historical New Highs & New Highs Before Price
histNH = ta.highest(rs  , prevlookback)
histCl = ta.highest(high, prevlookback)
// Historical RS New High
if(rsNewHigh == "Historical RS New Highs" and plotNewHigh and rs == histNH)
    label.new(x = bar_index, y = rs, color = blueDotCol, style = label.style_circle, size = size.tiny)
// Historical RS New High Before Price
if(rsNewHigh == "Historical RS New Highs  Before Price" and plotNewHigh and rs == histNH and high < histCl)
    label.new(x = bar_index, y = rs, color = blueDotCol, style = label.style_circle, size = size.tiny)
// RS New High
if(barstate.islast and rsNewHigh == "RS New Highs" and plotNewHigh and rs == histNH)
    label.new(x = bar_index, y = rs, color = blueDotCol, style = label.style_circle, size = size.tiny)
// RS New High Before Price
if(barstate.islast and rsNewHigh == "RS New Highs Before Price" and plotNewHigh and rs == histNH and high < histCl)
    label.new(x = bar_index, y = rs, color = blueDotCol, style = label.style_circle, size = size.tiny)


// Historical New Lows & New Lows Before Price
histNL  = ta.lowest(rs , prevlookback2)
histClL = ta.lowest(low, prevlookback2)
// Historical RS New Low
if(rsNewLow == "Historical RS New Lows" and plotNewLow and rs == histNL)
    label.new(x = bar_index, y = rs, color = redDotCol, style = label.style_circle, size = size.tiny)
// Historical RS New Low Before Price
if(rsNewLow == "Historical RS New Lows  Before Price" and plotNewLow and rs == histNL and low > histClL)
    label.new(x = bar_index, y = rs, color = redDotCol, style = label.style_circle, size = size.tiny)
// RS New Low
if(barstate.islast and rsNewLow == "RS New Lows" and plotNewLow and rs == histNL)
    labelNL   = label.new(x = bar_index, y = rs, color = redDotCol, style = label.style_circle, size = size.tiny)
// RS New Low Before Price
if(barstate.islast and rsNewLow == "RS New Lows Before Price" and plotNewLow and rs == histNL and low > histClL)
    labelNLBP = label.new(x = bar_index, y = rs, color = redDotCol, style = label.style_circle, size = size.tiny)



// Calculation of the RS Rating
// Getting ticker and reference ticker daily data
closeDa    = request.security(syminfo.tickerid,    'D', close)
spxCloseDa = request.security(comparativeTickerId, 'D', close)

// Calculation of the performance from 1 to 4 last quarters
// Ticker
perfTicker63   = closeDa/closeDa[n63]
perfTicker126  = closeDa/closeDa[n126]
perfTicker189  = closeDa/closeDa[n189]
perfTicker252  = closeDa/closeDa[n252]

// SP500 of reference ticker
perfComp63     = spxCloseDa/spxCloseDa[n63]
perfComp126    = spxCloseDa/spxCloseDa[n126]
perfComp189    = spxCloseDa/spxCloseDa[n189]
perfComp252    = spxCloseDa/spxCloseDa[n252]

// Using Formula to calculate a relative score of the ticker and the SP500 with the last quarter weighted double
float rs_stock = 0.4*perfTicker63 + 0.2*perfTicker126 + 0.2*perfTicker189 + 0.2*perfTicker252
float rs_ref   = 0.4*perfComp63   + 0.2*perfComp126   + 0.2*perfComp189   + 0.2*perfComp252

// Calculation of the total relative score or rs performance
float totalRsScore  = (rs_stock) / (rs_ref) * 100
float totalRsRating = -1

// Here we calculated the relative score of the stock. The goal is now to assign the percentile correctly
// For this I took the curve given by my fork repo of Skyte on Rs Log and tried to calibrate the better possible
// the output curve of the relative performance of the 6,6xx stocks.
// Link: https://github.com/Fred6725/rs-log/blob/main/output/rs_stocks.csv
// Here is the curve in ASCII Art; on the x-axis, the Rs Rating and on the y-axis, the calculated performance.
      
//                      
//                                                                                        /                               
//                                                                                        /                               
//                                                                                        /                               
//                                                                                        /                               
//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,/,,,,,,,,,,,,,,,,,              
//                                                                                        /                               
//                                                                                        /                               
//                                                                                        /                               
//                                                                                        /                               
//                                                                                       |                               
//                                                                                       /                               
//                                                                                      â¾                                 
//                                                                                     â¾                                   
//                                                                                   -â¾                                    
//                                                                           _____, â¾                                     
//                                         _____----------------â¾â¾â¾â¾â¾â¾â¾â¾â¾â¾â¾â¾â¾                                                   
//                        __ */â¾â¾â¾â¾â¾â¾â¾â¾â¾â¾â¾â¾                                                                                       
//             __ ,,----â¾â¾                                                                                                 
//          _/                                                                                                           
//        /                                                                                                               
//       |                                                                                                     
// ______|________________ _______________________________ _____________________________________            
//       |0               |20             |40             |60             |80              |100   
//
// I decided to cut this curve in 7 different levels that needs to be entered each day.
// These are relative strength scores corresponding to percentiles 98, 89, 69, 49, 29, 9 and 1.
// Finally I used the request.seed() function to auto update these levels automatically on a daily basis.
// Everything is managed in this repo if you're curious:
// https://github.com/Fred6725/relative-strength/tree/main    (Fork from Skyte)
// More precisly in rs_ranking.py for extracting what I needed and in workflows/output.yml for the auto update.
// The update is done in the private fork of the seed tradingview original repo, checked and synchronised automatically
// I tried to uplad the full 6,6xx list of relative strength score and rs rating but the display speed was too long.


// Use the request.seed() function to access the RS Score environment of all the market
curveRsPerf  = request.seed("seed_fred6725_rs_rating", "RSRATING", close)

// To prevent loosing data because of week-ends and public holidays I decided to send the value 5 times in a row.
// Which gives 5*7 = 35 bars.
// Depending of the day we look at the graph we will have a variable amount of bars. 
// The goal is to get these 7 numbers anyway.

// In case the graph is not updated, we count the number of bars since we have the first data.
// Calculation of the number of bar since we have the first data
delta  = ta.barssince(na(curveRsPerf)!=true)

// Table to store the different values
var float[] different_values = array.new_float(7)

// Counter for stored values
var int counter = 0

// Browse seed's values and store the first 7 different values
for i = delta to 34+delta
    close_value = nz(curveRsPerf[i])
    if not array.includes(different_values, close_value) and counter < 7 and close_value!=0
        array.set(different_values, counter, close_value)
        counter := counter + 1

// Assign stored values to variables
first = array.get(different_values, 0)
scnd  = array.get(different_values, 1)
thrd  = array.get(different_values, 2)
frth  = array.get(different_values, 3)
ffth  = array.get(different_values, 4)
sxth  = array.get(different_values, 5)
svth  = array.get(different_values, 6)

// Now that we've recovered the environment, we can assign a percentile using a simple linear approximation of the curve (+ adjustment).
if(totalRsScore >= first)
    totalRsRating := 99
if(totalRsScore <= svth)
    totalRsRating := 1

// Function to attribute the percentile with a simple linear approximation
f_attributePercentile(totalRsScore, tallerPerf, smallerPerf, rangeUp, rangeDn, weight) =>
    sum = totalRsScore + (totalRsScore-smallerPerf)*weight // weight is used for manual calibration
    if(sum > tallerPerf - 1)
        sum := tallerPerf - 1
    k1 = smallerPerf/rangeDn
    k2 = (tallerPerf-1)/rangeUp
    k3 = (k1-k2)/(tallerPerf-1-smallerPerf)
    RsRating = sum/(k1-k3*(totalRsScore-smallerPerf))
    if (RsRating > rangeUp)
        RsRating := rangeUp
    if (RsRating < rangeDn)
        RsRating := rangeDn
    RsRating

// Between 199 & 120 the score where approx 98 to 90.
if(totalRsScore < first and totalRsScore >= scnd)
    totalRsRating := f_attributePercentile(totalRsScore, first, scnd, 98, 90, 0.33)
// Between 119 and 100 we ave scores between 89 and 70.
if (totalRsScore < scnd and totalRsScore >= thrd)
    totalRsRating := f_attributePercentile(totalRsScore, scnd, thrd, 89, 70, 2.1)
// Between 100 and 91 we ave scores between 69 and 50.
if (totalRsScore < thrd and totalRsScore >= frth)
    totalRsRating := f_attributePercentile(totalRsScore, thrd, frth, 69, 50, 0)
// Between 90 and 82 we ave scores between 49 and 30.
if (totalRsScore < frth and totalRsScore >= ffth)
    totalRsRating := f_attributePercentile(totalRsScore, frth, ffth, 49, 30, 0)
// Between 81 and 56 we ave scores between 29 and 10.
if (totalRsScore < ffth and totalRsScore >= sxth)
    totalRsRating := f_attributePercentile(totalRsScore, ffth, sxth, 29, 10, 0)
// Between 55 and 28 we ave scores between 9 and 2.
if (totalRsScore < sxth and totalRsScore >= svth)
    totalRsRating := f_attributePercentile(totalRsScore, sxth, svth, 9, 2, 0)


// Display the RS Rating
// The results can only be used in Daily TimeFrame
isDaily = timeframe.isdaily
labelText1 = "RS Rating"
labelText2 = "N/A"
if(isDaily)
    labelText2 := "\n\n"+str.tostring(totalRsRating,"#0")
if(not isDaily)
    labelText2 := ""
label1 = (hideRSRat == false) and barstate.islast ? label.new(bar_index, rs, text=labelText1 , color = color.rgb(0,0,0,100), size=size.normal, textcolor=colorRS, style=label.style_label_left, textalign=text.align_left, yloc=yloc.price) : na
label2 = (hideRSRat == false) and barstate.islast ? label.new(bar_index, rs, text=labelText2 , color = color.rgb(0,0,0,100), size=size.large, textcolor=colorRS, style=label.style_label_left, textalign=text.align_left, yloc=yloc.price) : na

// Delete previous Labels (When new candle opens or when replay mode, the labels were piling on)
label.delete(label1[1])
label.delete(label2[1])






//------------------  Markerd Highs and Lows  ---------------------//

// Price Peak/Valley Points
// Highlights exact price at high or low points over a 19-period interval.
// For example, on a Daily chart, a High Price point is marked on the date
// where there has been no higher price the 9 days prior to that date and
// the 9 days following that date.

// High Price Point
i_displayHL = input(true, title="Display H/L Points", group="High/Low Price Points")
i_colorHL   = input(color.rgb(0,0,0,0), title='Labels Color', group="High/Low Price Points")
i_pivot     = input(9, title="Length for peak/valey points")
if(i_displayHL and not timeframe.isweekly)
    pivotHigh      = ta.pivothigh(high, i_pivot, i_pivot)
    if (pivotHigh)
        textHigh9  = str.tostring(high[i_pivot], '0.00')
        highestHigh = label.new(bar_index-i_pivot, high[i_pivot], xloc=xloc.bar_index, yloc=yloc.price, style=label.style_none, text=textHigh9, textcolor=i_colorHL)
    // Low Price Point
    pivotLow       = ta.pivotlow(low, i_pivot, i_pivot)
    if (pivotLow)
        textLow9  = str.tostring(low[i_pivot], '0.00')
        lowestLow  = label.new(bar_index-i_pivot, low[i_pivot], xloc=xloc.bar_index, yloc=yloc.price, style=label.style_label_center, text="\n" + textLow9, textcolor=i_colorHL, color=color.rgb(0,0,0,100))
